#!/bin/bash
# This script allows the user to maintain Pi/GEOS in an easy manner
DEBUG=1
DIAL=$(which whiptail || which dialog)
BTITLE="Pi/GEOS SETUP and configuration tool v0.1"
CONFIG=$HOME/.pigeos
FONT=/usr/share/consolefonts/Uni2-TerminusBold24x12.psf.gz

read_conf() { source ${CONFIG}.new; source $MENU_TEXT; }

info_msg() 	{ $DIAL --backtitle "$BTITLE" --title "Information"  --msgbox  "$1" 8 50; }
err_msg()  	{ $DIAL --backtitle "$BTITLE" --title "Error"        --msgbox "$1" 8 50; }
yesno_dlg() 	{ $DIAL --backtitle "$BTITLE" --title "Confirmation" --yesno  "$1" 8 50; }

menu_dlg() {
  local title=$1; shift
  local text=$1; shift
  local items=("$@")
  local sel=$($DIAL --backtitle "$BTITLE" --title "${title}" \
	  --menu "${text}" 20 76 $((${#items[@]}/2)) "${items[@]}" \
	  3>&1 1>&2 2>&3)
  [[ $? -eq 0 ]] && echo $sel || return 1
}

main_menu()
{
  local selection
  while :; do
    read_conf
    selection=$(menu_dlg "${main_title}" "${main_text}" "${main_options[@]}")
    case $selection in
      Basic)	basic_menu ;;
      Advanced)	: ;;
      System)	sudo raspi-config ;;
      Default)	: ;;
      Hard*)	info_msg "Function not yet implemented :(" ;;
      Write)	return 0 ;;
      *)		yesno_dlg "$main_abort_msg" && return 1 ;;
    esac
  done
}

basic_menu()
{
  local selection
  while :; do
    read_conf
	selection=$(menu_dlg "${basic_title}" "${basic_text}" "${basic_options[@]}")
    case $selection in
      Date*)		true ;;
      Hard*C*)		imgsel_menue hdc ;;
      Hard*D*)	 	imgsel_menue hdd ;;
      Floppy*A*)	imgsel_menue fda ;;
      Floppy*B*)	imgsel_menue fdb ;;
      Keyboard)		info_msg "Not implemented yes" ;;
      *)		break
    esac
  done
}

imgsel_menue()
{
  local selection
  local imgsel_drv=${1}
  local imgsel_list=("NONE" "no image selected")
  local imgsel_dir=$HOME/${imgsel_drv:0:2}d_images/
  # build the list of available disk images
  for f in ${imgsel_dir}/*.inf 
    do imgsel_list+=("$(basename $f .inf)" "$(head -1 $f)"); done
  # ask the user to choose one image
  selection=$(menu_dlg "${imgsel_title}" "${imgsel_text}" "${imgsel_list[@]}")
  if [ "$selection" == "NONE" ]; then
    sed -i "s#${imgsel_drv^^}_IMAGE=.*#${imgsel_drv^^}_IMAGE=NONE#" ${CONFIG}.new
  elif [ ! -z "$selection" ]; then
    # load multi line image desc into a single vaariable
	local imgsel_inf=""
	while read line 
	  do imgsel_inf="${imgsel_inf}${line}\n"; done \
	  <${imgsel_dir}/${selection}.inf
    $DIAL --backtitle "$BTITLE" --title "Image Information" \
	  --yesno "${imgsel_inf}\n\n${imgsel_conf}" \
	  $(($(echo -e "$imgsel_inf" | wc -l)+10)) 78
    if [ $? -eq 0 ]; then
      sed -i "s#${imgsel_drv^^}_IMAGE=.*#${imgsel_drv^^}_IMAGE=${imgsel_dir}${selection}.img#" ${CONFIG}.new
    fi
  fi
}

### Main ###########################################################################
# switch console font to get a aprox. 25x80 char resolution
setfont $FONT
# load menue language
if 	 [ -r /usr/local/share/pigeos/pigeos-config.$LANG ]; then
  MENU_TEXT=/usr/local/share/pigeos/pigeos-config.$LANG
elif [ -r ./pigeos-config.$LANG ]; then
  MENU_TEXT=./pigeos-config.$LANG
else
  err_msg "Unable to load language file!"
  exit 254
fi
# changes made by the config tool are applied to a new file
cp -p 	${CONFIG} 		${CONFIG}.new
# launch menue
main_menu
if [ $? -eq 0 ]; then
  # save changes and reboot
  mv ${CONFIG}.new ${CONFIG}
  pigeos-splash update 
  sudo reboot
else
  # remove interim config file
  if [ $DEBUG -eq 0 ]; then
    rm ${CONFIG}.new
  else
    exit 255 # to break the pigeos-loader loop
  fi
fi
exit 0



