#!/bin/bash
# This script allows the user to configure Pi/GEOS in an easy manner
# 
# While in the UI only values in the pigeos user config file are altered.
# When the user saves the configuration it will applied by caling pigoes-setup
# or when pigeos-loder determinates the paramters for DOSBox.
#
# see also: pigeos-loader, pigeos-setup
DEBUG=1
SN=$(cat /sys/firmware/devicetree/base/serial-number)
DIAL=$(which whiptail || which dialog)
BTITLE="Pi/GEOS SETUP configuration tool v0.1 (S/N:$SN)"
CONFIG=$HOME/.pigeos
FONT=/usr/share/consolefonts/Uni2-TerminusBold24x12.psf.gz

## Configuration functions ################################
conf_get()   { echo  ${CONFIG}.new; }
conf_new()   { cp -p ${CONFIG} ${CONFIG}.new; }
conf_save()  { mv    ${CONFIG}.new ${CONFIG}; pigeos-splash update; }
conf_abort() { rm    ${CONFIG}.new; }
conf_reset() { 
  if [ dial_yesno $main_reset_msg ]; then
  	echo ". /usr/local/etc/pigeos.conf" \
	  > ${CONFIG}.new
  	egrep -v 'DOSBOX_BIN|CONTINUE_SETUP|IMAGE_URL|.*[\\\)]$|^#.*' \
	  /usr/local/etc/pigeos.conf \
  	  >>${CONFIG}.new
  fi
}

## UI functions ###########################################
dial_info()  { $DIAL --backtitle "$BTITLE" --title "Information"  --msgbox   "$1" 8 50; }
dial_err()   { $DIAL --backtitle "$BTITLE" --title "Error"        --msgbox   "$1" 8 50; }
dial_yesno() { $DIAL --backtitle "$BTITLE" --title "Confirmation" --yesno    "$1" 8 50; }

dial_input() { 
  local sel=$($DIAL --backtitle "$BTTILE" --title "${1}" \
    --inputbox "$2" 8 76 "$3" \
    3>&1 1>&2 2>&3)
  [[ $? -eq 0 ]] && echo $sel || return 1
}

dial_menu()  {
  local title=$1; shift
  local text=$1; shift
  local items=("$@")
  local itemc=$((${#items[@]}/2))
  if [ $itemc -gt 10 ]; then
    itemc=10
  fi
  local sel=$($DIAL --backtitle "$BTITLE" --title "${title}" \
	   --menu "${text}" 20 76 $itemc "${items[@]}" \
	   3>&1 1>&2 2>&3)
  [[ $? -eq 0 ]] && echo $sel || return 1
}

## Helper functions #############################################
file_download() {
  wget --progress=dot "$1" -O "$2" 2>&1 \
  | sed -un 's/.* \([0-9]\+\)% .*/\1/p' \
  | $DIAL --backtitle "$BTITLE" --gauge "Downloading: $1" 8 76 0
}

file_archive() { 
  local arc="$1"; shift 
  # strip the path from the files to archive
  local pth=$(dirname $1)
  local src=("$(basename $1)")
  while shift; do
    [ -f "$1" ] && src+=("$(basename $1)")
  done
  # compute number of allocated blocks to handle sparse files
  local size=$(stat -c%b ${src[@]} \
    | awk 'BEGIN{sum=0}{sum=sum+$1*512}END{print sum}')
  (tar cSf - -C $pth ${src[@]} | pv -n -s${size} | gzip >${arc}) 2>&1 \
    | $DIAL --backtitle "$BTITLE" --gauge "Archiving: ${arc}" 8 76 0
}

file_extract() {
  local arc="$1"
  local dst="$2"
  if [ -f $arc -a -d $dst ]; then
    tar xzSf $arc -C $dst 2>/dev/null 1>&2
  fi
}

## Main menu #####################################################
main_menu() {
  local selection
  while :; do
    source $(conf_get); source $MENU_TEXT
    selection=$(dial_menu "${main_title}" "${main_text}" "${main_options[@]}")
    case $selection in
      Basic)	basic_menu ;;
      Advanced)	advanced_menu ;;
      System)	system_menu ;;
      Default)	conf_reset ;;
      Hard*)	imgmgmt_menu ;;
      Write)	return 0 ;;
      *)		dial_yesno "$main_abort_msg" && return 1
    esac
  done
}

## Basic Menu #####################################################
basic_menu() {
  local selection
  while :; do
    source $(conf_get); source $MENU_TEXT
	selection=$(dial_menu "${basic_title}" "${basic_text}" "${basic_options[@]}")
    case $selection in
      Date*)		true ;;
      Hard*C*)		imgsel_menu hdc ;;
      Hard*D*)	 	imgsel_menu hdd ;;
      Floppy*A*)	imgsel_menu fda ;;
      Floppy*B*)	imgsel_menu fdb ;;
      Keyboard*)	keybrd_menu ;;
      *)		break
    esac
  done
}

imgsel_menu() {
  local selection
  local imgsel_drv=${1}
  local imgsel_list=("NONE" "no image selected")
  local imgsel_dir=$HOME/${imgsel_drv:0:2}d_images/
  # build the list of available disk images
  for f in ${imgsel_dir}/*.inf; do 
    # if no files are there f = '*', so it has to be validated
	if [ -f $f ]; then
	  imgsel_list+=("$(basename $f .inf)" "$(head -1 $f)")
	fi
  done
  # ask the user to choose one image
  selection=$(dial_menu "${imgsel_title}" "${imgsel_text}" "${imgsel_list[@]}")
  if [ "$selection" == "NONE" ]; then
    sed -i "s#${imgsel_drv^^}_IMAGE=.*#${imgsel_drv^^}_IMAGE=NONE#" $(conf_get)
  elif [ ! -z "$selection" ]; then
    # load multi line image desc into a single variable
	local imgsel_inf=""
	while read line 
	  do imgsel_inf="${imgsel_inf}${line}\n"; done \
	  <${imgsel_dir}/${selection}.inf
    $DIAL --backtitle "$BTITLE" --title "Image Information" \
	  --yesno "${imgsel_inf}\n\n${imgsel_conf}" \
	  $(($(echo -e "$imgsel_inf" | wc -l)+10)) 78
    if [ $? -eq 0 ]; then
      sed -i "s#${imgsel_drv^^}_IMAGE=.*#${imgsel_drv^^}_IMAGE=${imgsel_dir}${selection}.img#" $(conf_get)
    fi
  fi
}

keybrd_menu() {
  local selection
  source $(conf_get); source $MENU_TEXT
  selection=$(dial_menu "${keybsel_title}" "${keybsel_text}" "${keybsel_options[@]}")
  if [ "x$selection" != "x" ]; then
    # language settings where not present in early versions
    grep -q KEYB $(conf_get) || echo "KEYB=us" >>$(conf_get)
	# set selected lang.
    sed -i "s#KEYB=.*#KEYB=$selection#" $(conf_get)
  fi
}

## Advanced Menu ################################
advanced_menu() { 
  local selection
  while :; do
    source $(conf_get); source $MENU_TEXT
	selection=$(dial_menu "${advanced_title}" "${advanced_text}" "${advanced_options[@]}")
    case "$selection" in
      CUPS*)		service_activcation_menu "CUPS_SLOAD" ;;
  	  DOSBox*)  	prnsel_menu ;;
      Remote*)	 	service_activcation_menu "CUPS_ADMIN" ;;
      MIDI*)	    service_activcation_menu "MIDI_SLOAD" ;;
	  ResilioSync*) service_activcation_menu "RSLSYNC_SLOAD" ;;
	  Acces*Key*)	advanced_sync_key_edit ;;
	  Internet*)	service_activcation_menu "RSLSYNC_WAN" ;;
      *)		    break
    esac
  done
}

prnsel_menu() {
  local selection
  local prnsel_list=("AUTO" "autodetect" "PDF" "PDF Export")
  # build the list of available printers
  for p in $(lpstat -a | cut -d ' ' -f 1); do 
    [[ ! -z "$p" ]] && prnsel_list+=("$p" "${p//_/ }")
  done
  # ask the user to choose a printer
  selection=$(dial_menu "${prnsel_title}" "${prnsel_text}" "${prnsel_list[@]}")
  if [ ! -z "$selection" ]; then
    grep -q CUPS_DBPRN $(conf_get) \
	  && sed -i "s#CUPS_DBPRN=.*#CUPS_DBPRN=${selection}#" $(conf_get) \
	  || echo "CUPS_DBPRN=${selection}" >> $(conf_get)
  fi
}

advanced_sync_key_edit() {
  local selection
  source $(conf_get)
  # the sync key can only set once but not changed later 
  if [ "x$RSLSYNC_KEY" == "x" ]; then
    selection=$(dial_input "Input" "${advanced_sync_key_edit}" "$RSLSYNC_KEY" || echo ABORT)
  	if [ "x$selection" != "xABORT" ]; then
      grep -q "RSLSYNC_KEY" $(conf_get) \
	  	&& sed -i "s#RSLSYNC_KEY=.*#RSLSYNC_KEY=${selection}#" $(conf_get) \
	  	|| echo 	   "RSLSYNC_KEY=${selection}" >> $(conf_get)
  	fi
  else
  	dial_info "$advanced_sync_key_warn"
  fi
}

service_activcation_menu() {
  local service=$1
  local selection
  dial_yesno "$service $advanced_serv_activate"; selection=$?
  if [ $selection -ne 255 ]; then
	grep -q "$service" $(conf_get) \
  	  && sed -i "s#${service}=.*#${service}=$(($selection==0?1:0))#" $(conf_get) \
	  || echo 	  "${service}=$(($selection==0?1:0))" >> $(conf_get)
  fi
}


## System menu ##################################
system_menu() { sudo raspi-config; }

## ImageMgmt Menu ###############################
imgmgmt_menu() {
  local selection
  while :; do
    source $(conf_get); source $MENU_TEXT
	selection=$(dial_menu "${imgmgmt_title}" "${imgmgmt_text}" "${imgmgmt_options[@]}")
	case $selection in
      Create*)		imgmgmt_create ;;
      Delete*)		imgmgmt_delete ;;
      Download*)	imgmgmt_download ;;
      Export*)	    imgmgmt_export ;;
      Import*)      imgmgmt_import ;;
      *)		    break
    esac
  done
}

imgmgmt_create() { 
  local isize
  local iname
  local idesc
  # ask for image name, size and a short description
  while :; do
    isize=$(dial_input "Image size" "$imgmgmt_image_size" 512)
	iname=$(dial_input "Image name" "$imgmgmt_image_filename" "$iname")
	idesc=$(dial_input "Image description" "$imgmgmt_image_descrition" "")
    # check none zero values and characters not allowed in file names
    if [ "x$isize" == "x" -o "x$iname" == "x" ]; then
	  dial_yesno "$imgmgmt_not_null" && continue || break
	elif [ "$isize" != "$(echo $isize | tr -cd '[:digit:]')" ]; then
	  dial_yesno "Invalid value: $isize Retry?" && continue || break
	elif [ "$iname" != "$(echo $iname | tr -cd '[:alnum:]_-')" ]; then
	  dial_yesno "Invalid value: $iname Retry?" && continue || break
	fi
	# call external image utility to create sparse file image
	pigeos-image create "$iname" "$isize" "$idesc" 2>/dev/null 1>&1
	if [ $? -eq 0 ]; then
	  dial_info "$imgmgmt_create_ok $HOME/hdd_images/$iname"; break
	else
	  dial_yesno  "$imgmgmt_create_fail $HOME/hdd_images/$iname" && continue || break
	fi
  done
}

imgmgmt_delete() { dial_info "Sorry, this function hasn't been implemented yet."; }

imgmgmt_download() {
  local selection
  local url
  local regex='^(https?|ftp)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]$'
  local ilist=()
  local imidx=$((${#IMAGE_URL[@]}/2 -1)) 
  [[ $imidx -le 0 ]] && set && exit 255
  for i in $(seq 0 $imidx); do
    j=$((i*2))
    ilist+=("$i" "${IMAGE_URL[$j]}")
  done
  ilist+=("$((++i))" "Custom")
  selection=$(dial_menu "Image Download" "Select an image to download" "${ilist[@]}")
  if [ $selection == $i ]; then
    # last option selected -> ask for a custom URL
    url=$(dial_input "Dounwload" \
                  "$imgmgmt_download" \
				  "https://dl.dropbox.com/s/4v6gm5z0ynyft4k/ensdemo402.tgz")
  elif [ "x$selection" != "x" ]; then
    j=$((selection*2+1))
	url="${IMAGE_URL[$j]}"
  fi
  if [[ $url =~ $regex ]]; then
    file_download "$url" /tmp/imgmgmt_new_image.tgz
	tar xzSf /tmp/imgmgmt_new_image.tgz -C ~/hdd_images
	if [ $? -eq 0 ]; then
	  dial_info "$imgmgmt_unpack_suc"
	  rm /tmp/imgmgmt_new_image.tgz
	else
	  dial_err "$imgmgmt_unpack_err"
	fi
  else
    dial_err "$imgmgmt_invalid_url"
  fi
}

imgmgmt_export() { 
  local selection
  local imgsel_list=()
  local imgsel_dir=$HOME/hdd_images/
  # check for a mount usb disk
  mount | grep -q '/media/usb0'
  if [ $? -ne 0 ]; then
    dial_err "$imgmgmt_usb_not_present"
	return 1
  fi
  # build the list of available disk images
  for f in ${imgsel_dir}/*.inf 
    do imgsel_list+=("$(basename $f .inf)" "$(head -1 $f)"); done
  # ask the user to choose one image
  selection=$(dial_menu "${imgsel_title}" "${imgsel_text}" "${imgsel_list[@]}")
  if [ ! -z "$selection" ]; then
    file_archive /media/usb/${selection}.tgz ${imgsel_dir}/${selection}.i??
  fi
}

imgmgmt_import() {
  local selection
  local imgsel_list=()
  local imgsel_dir=$HOME/hdd_images/
  # check for a mount usb disk
  mount | grep -q '/media/usb0'
  if [ $? -ne 0 ]; then
    dial_err "$imgmgmt_usb_not_present"
	return 1
  fi
  # build the list of available disk images
  local imgsel_count=$(ls /media/usb/*.tgz 2>/dev/null | wc -l)
  if [ $imgsel_count -eq 0 ]; then
    dial_err "$imgmgmt_no_arc_found"
	return 2
  fi
  # init counters for gauge
  local cnt=$((100 % $imgsel_count))
  local stp=$((100 / $imgsel_count))
  for f in /media/usb/*.tgz ; do 
    imgsel_list+=("$(basename $f .tgz)"\
	              "$(tar xzf $f --wildcards '*.inf' --to-command 'head -1')")
	cnt=$(($cnt + $stp))
	echo $cnt | $DIAL --backtitle "$BTITLE" --gauge "Scanning archives" 8 76 0
  done 
  # ask the user to choose one image
  selection=$(dial_menu "${imgsel_title}" "${imgsel_text}" "${imgsel_list[@]}")
  if [ ! -z "$selection" ]; then
    file_extract /media/usb/${selection}.tgz $imgsel_dir
    dial_info "$imgmgmt_unpack_suc"
  fi
}

### Main ###########################################################################
# switch console font to get a aprox. 25x80 char resolution
setfont $FONT
# load menue language
if   [ -r ./pigeos-config.$LANG ]; then
  MENU_TEXT=./pigeos-config.$LANG
elif [ -r /usr/local/share/pigeos/pigeos-config.$LANG ]; then
  MENU_TEXT=/usr/local/share/pigeos/pigeos-config.$LANG
else
  dial_err "Unable to load language file!"
  exit 254
fi
# changes made by the config tool are applied to a new file
conf_new
# launch menue
main_menu
if [ $? -eq 0 ]; then
  # save changes
  conf_save
  # and reboot if not in debug mode
  [[ $DEBUG -eq 0 ]] && reboot	  	|| exit 0
else
  # remove interim config file and return to the pigeos-loader loop
  [[ $DEBUG -eq 0 ]] && conf_abort	|| exit 255
fi
exit 0


