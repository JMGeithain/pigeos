#!/bin/bash
# Pi/GEOS installer v0.1"
#set -e
#set -x
# essential raspi configuration files
BOOT_CONFIG=/boot/config.txt
BOOT_CMDLINE=/boot/cmdline.txt
# base for Pi/GEOS system files and binaries
PIGEOS_PREFIX=/usr/local
# which dosbox binary should be launched?
DOSBOX_BIN=$PIGEOS_PREFIX/bin/dosbox
DOSBOX_USER=$(who | grep tty1 | cut -d\  -f 1)
# packages Pi/GEOS and dosbox-pigeos depend on:
PKG_LIST="iptables ppp socat usbmount libsdl-sound1.2 libsdl-net1.2 libpcap0.8 timidity-daemon fbi imagemagick jed pv vorbis-tools gldriver-test libgl1-mesa-dri"
# list of external files need to be installed by this script
# a customized version of DOSBox
URL_DOSBOX_PKG="https://dl.dropbox.com/s/8s7ge2co2qmw1q6/dosbox_0.74%2Bpigeos_armhf.deb"
URL_DOSBOX_LANG=(\
  "https://raw.githubusercontent.com/hastho/pigeos/master/defaults/mapper-0.74.map.de_DE.UTF-8" \
  "https://raw.githubusercontent.com/hastho/pigeos/master/defaults/mapper-0.74.map.en_US.UTF-8" \
)
URL_DOSBOX_CONFIG="https://raw.githubusercontent.com/hastho/pigeos/master/defaults/dosbox-0.74.conf"
# a classic modem style dialing sound
URL_DIALING_SOUND="https://upload.wikimedia.org/wikipedia/commons/3/33/Dial_up_modem_noises.ogg"
# a font to be used in the BIOS splash screen and splash screen template
URL_FONTS="https://int10h.org/oldschool-pc-fonts/download/oldschool_pc_font_pack_v1.01.zip"
URL_SPLASH="https://raw.githubusercontent.com/hastho/pigeos/master/gfx/splash_tpl.png"
# pigeos configuration and helper scripts
URL_SETUP_SCRIPT="https://raw.githubusercontent.com/hastho/pigeos/master/pigeos-setup"
URL_IMAGE_SCRIPT="https://raw.githubusercontent.com/hastho/pigeos/master/pigeos-image"
URL_LOADER_SCRIPT="https://raw.githubusercontent.com/hastho/pigeos/master/pigeos-loader"
URL_SPLASH_SCRIPT="https://raw.githubusercontent.com/hastho/pigeos/master/pigeos-splash"
# Pi/GEOS configuration script, fixed values configuration file and language files
URL_CONFIG_SCRIPT="https://raw.githubusercontent.com/hastho/pigeos/master/pigeos-config"
URL_CONFIG_SYSCFG="https://raw.githubusercontent.com/hastho/pigeos/master/defaults/pigeos.conf"
URL_CONFIG_LANG=(\
  "https://raw.githubusercontent.com/hastho/pigeos/master/pigeos-config.de_DE.UTF-8" \
  "https://raw.githubusercontent.com/hastho/pigeos/master/pigeos-config.en_US.UTF-8" \
)

LOG_FILE=/tmp/$(basename $0).log

download_file() {
  wget -q "$1" -O "$2" 
}

install_dep_pkg() {
  sudo apt-get -y install $*
}

install_dosbox_pkg() {
  download_file "$URL_DOSBOX_PKG" /tmp/dosbox.deb
  # remove package from blacklist
  echo "dosbox install" | sudo dpkg --set-selections
  sudo dpkg -i /tmp/dosbox.deb
  # blacklist dosbox package so it will not ibe replaced
  # with the system default dosbox during any upgrades
  echo "dosbox hold" | sudo dpkg --set-selections
  # install a custom DOSBox configuration
  download_file "$URL_DOSBOX_CONFIG" /tmp/$(basename "$URL_DOSBOX_CONFIG")
  install -D /tmp/$(basename "$URL_DOSBOX_CONFIG")\
    $HOME/.dosbox/$(basename "$URL_DOSBOX_CONFIG") 
  # download locallolized key maps
  for lang in ${URL_DOSBOX_LANG[@]}; do
    download_file "$lang"    /tmp/$(basename "$lang")
	sudo install -D          /tmp/$(basename "$lang")\
	  $PIGEOS_PREFIX/share/pigeos/$(basename "$lang")
  done
  # create folder to store the disk images
  test -d $HOME/hdd_images || mkdir $HOME/hdd_images
  test -d $HOME/fdd_images || mkdir $HOME/fdd_images
}

install_pigeos_scripts() {
  for file_url in "$URL_SETUP_SCRIPT" "$URL_IMAGE_SCRIPT" "$URL_LOADER_SCRIPT"\
                  "$URL_SPLASH_SCRIPT" "$URL_CONFIG_SCRIPT"
  do
    download_file "$file_url" /tmp/$(basename "$file_url")
    sudo install -D /tmp/$(basename "$file_url") \
	  $PIGEOS_PREFIX/bin/$(basename "$file_url")
  done
}

install_pigeos_config() {
  download_file "$URL_CONFIG_SYSCFG" /tmp/$(basename "$URL_CONFIG_SYSCFG")
  sudo install -D  /tmp/$(basename "$URL_CONFIG_SYSCFG")\
     $PIGEOS_PREFIX/etc/$(basename "$URL_CONFIG_SYSCFG")
  # include system config in user config, if not allready present
  grep -q $(basename "$URL_CONFIG_SYSCFG") $HOME/.pigeos || \
    echo ". $PIGEOS_PREFIX/etc/$(basename $URL_CONFIG_SYSCFG)"\
    >$HOME/.pigeos
  for lang in ${URL_CONFIG_LANG[@]}; do
    download_file "$lang" /tmp/$(basename "$lang")
	sudo install -D          /tmp/$(basename "$lang")\
	  $PIGEOS_PREFIX/share/pigeos/$(basename "$lang")
  done
}

install_splash_screen() {
  # This custom splash screen simluates a PC BIOS
  # screen and provides some information about the
  # current Pi/GEOS configuration.
  download_file $URL_SPLASH \
    /tmp/splash_tpl.png 2>&1
  sudo install -D /tmp/splash_tpl.png  \
    $PIGEOS_PREFIX/share/pigeos/splash_tpl.png 2>&1
  sudo mkdir -p $PIGEOS_PREFIX/lib/pigeos 2>&1
  download_file $URL_FONTS \
    /tmp/ultimate_oldschool_pc_font_pack.zip 2>&1
  unzip -jod /tmp /tmp/ultimate_oldschool_pc_font_pack.zip \
    '*/Px437_PhoenixEGA_8x16.ttf' 2>&1 
  sudo install -D /tmp/Px437_PhoenixEGA_8x16.ttf \
    /usr/share/fonts/truetype/oldschool_pc_font/Px437_PhoenixEGA_8x16.ttf 2>&1
  sudo fc-cache -f 2>&1
  # create image config params req. by pigeos-splash, if not present
  for param in FDA_IMAGE FDB_IMAGE HDC_IMAGE HDD_IMAGE; do
    grep -q "${param}=.*" $HOME/.pigeos || echo "${param}=NONE" >> $HOME/.pigeos
  done
  pigeos-splash update 2>&1
  echo "Creating splash screen service" 
  sudo tee /etc/systemd/system/splash_screen.service >/dev/null <<SPLASH_SCR
[Unit]
Description=Pi/GEOS splash screen service
DefaultDependencies=no

[Service]
ExecStart=/usr/bin/fbi -noverbose  /usr/local/lib/pigeos/splash.png

StandardInput=tty
StandardOutput=tty


[Install]
WantedBy=multi-user.target
SPLASH_SCR
  # enable service
  sudo systemctl daemon-reload 2>&1
  sudo systemctl enable splash_screen 2>&1
  sudo systemctl start splash_screen 2>&1
  return 0
}

install_dosbox_modem() {
  # DOSBox will foreward it's virtuel modem connection
  # to a local telnet port that will be redirects to
  # a virtuel TTy where a PPPD can bind to
  echo -n "Creating modem service "
  sudo tee /etc/systemd/system/modem@.service >/dev/null <<MODEM_SRV
[Unit]
Description=Start DOSBox virtual modem on given TTY
After=network.target
StartLimitIntervalSec=0
StartLimitBurst=3000

[Service]
Restart=always
RestartSec=3
Type=simple
PIDFile=/run/modem-%i.pid
ExecStart=/usr/bin/socat -L/run/modem-%i.pid -d -d -s -lf /var/log/modem-%i.log TCP4-LISTEN:23,bind=127.0.0.1 PTY,link=/dev/%i,raw,echo=0,b57600 

[Install]
WantedBy=multi-user.target
MODEM_SRV
  echo done.

  # as the virtual TTy is only created by socat when DOSBox
  # establishes a modem connection PPPD service can only
  # be started after the TTY has been created.
  sudo tee /etc/systemd/system/pppd@.path >/dev/null <<PPP_MON
[Unit]
Description=Start PPP, if the given (SoCAT) TTY is present

[Path]
PathExists=/dev/%i

[Install]
WantedBy=multi-user.target
PPP_MON

  # before PPPD will be started a nice modem dialing sound will
  # be played :) At this point NAT will be activated for all
  # interfaces and connection tracking roles to allow active
  # FTP (req. by the GEOS FTP client) are aplied.
  # 
  sudo tee /etc/systemd/system/pppd@.service >/dev/null <<PPP_SRV
[Unit]
Description=Start PPPD for the given TTY

[Service]
Type=simple
EnvironmentFile=/etc/default/pppd-%i.conf
PIDFile=/run/pppd%i.pid
ExecStartPre=-/usr/bin/ogg123 /usr/local/share/sound/dialing.ogg
ExecStartPre=/sbin/iptables -t nat -A POSTROUTING -s \$PPPD_NETWORK -j MASQUERADE
ExecStartPre=/sbin/iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
ExecStartPre=/sbin/iptables -A PREROUTING -t raw -p tcp --dport 21 -j CT --helper ftp
ExecStart=/usr/sbin/pppd /dev/%i \$PPPD_CONNECTION \$PPPD_DEFAULTS
PPP_SRV

  # PPPD configuration is different for any serial line and
  # the IP ranges need to be modified. 
  sudo tee /etc/default/pppd-ttyN0.conf >/dev/null <<PPP_CFG
PPPD_DEFAULTS=nodetach local noauth
PPPD_NETWORK=192.168.6.0/30
PPPD_CONNECTION=57600 192.168.6.1:192.168.6.2
PPP_CFG

  # load kernel modules to allow active FTP
  grep -e 'nf_conntrack_ftp|nf_nat_ftp' /etc/modules-load.d/modules.conf \
  || sudo tee -a /etc/modules-load.d/modules.conf >/dev/null <<FTP_MOD
nf_conntrack_ftp
nf_nat_ftp
FTP_MOD

  # enable routing
  sudo tee /etc/sysctl.d/98-ppd.conf >/dev/null <<PPP_SYSCTL
net.ipv4.ip_forward=1
PPP_SYSCTL

  # reload system configuration and enable/start services
  sudo sysctl -p /etc/sysctl.conf
  sudo modprobe nf_nat_ftp
  sudo systemctl daemon-reload
  sudo systemctl enable modem@ttyN0
  sudo systemctl start modem@ttyN0
  sudo systemctl enable pppd@ttyN0.path
  sudo systemctl start pppd@ttyN0.path

  # Configure DOSBox with modem connected on COM1
  sed -i 's/serial1=.*/serial1=modem/' $(dosbox -printconf)
  return 0
}

install_dosbox_telnetd() {
  # install a simple telnet service on localhost that can be accessed from
  # GEOS via DOSBox COM2 nullmodem link
  sudo tee /etc/systemd/system/telnetd.service >/dev/null <<TELNET_SRV
[Unit]
Description=Start DOSBox null-modem host link
After=network.target
StartLimitIntervalSec=0
StartLimitBurst=3000

[Service]
Restart=always
RestartSec=3
Type=simple
PIDFile=/run/telnetd.pid
ExecStart=/usr/bin/socat -L /run/telnetd.pid -d -d -s -lf /var/log/telnetd.log  TCP4-LISTEN:2023,bind=127.0.0.1 exec:"/sbin/agetty --autologin pi --noclear - -- vt100",pty,raw,echo=0,b57600

[Install]
WantedBy=multi-user.target
TELNET_SRV
  sudo systemctl daemon-reload
  sudo systemctl enable telnetd
  sudo systemctl start telnetd

  # Configure DOSBox to have a nullmodem link on COM2
  sed -i 's/serial2=.*/serial2=nullmodem server:127.0.0.1 port:2023/' $(dosbox -printconf)
}

config_login()
{
  # raspi-config will switch to text console mode and 
  # enables auto-login  on TTY1 for the user who 
  # executes this script
  sudo /usr/bin/raspi-config nonint do_boot_behaviour B2
  # to make the login realy "silent" so that no output apears between the BIOS splash 
  # and theDOSBox splash the autologin.conf file needs to be modified
  sudo tee /etc/systemd/system/getty@tty1.service.d/autologin.conf >/dev/null <<LOGIN_AUTO
[Service]
ExecStart=
ExecStart=-/sbin/agetty --noissue --skip-login --login-program /bin/login --login-options '-f pi'  %I \$TERM
LOGIN_AUTO
  # also remove the "last login" message
  sudo sed -i 's/^LASTLOG_ENAB/#LASTLOG_ENAB/' /etc/login.defs
  # create a login profile setting to exec the Pi/GEOS loader after login
  sudo tee /etc/profile.d/10-pigeos.sh >/dev/null <<LOGIN_PROF
if [ "\$(tty)" = "/dev/tty1" ]; then
  $PIGEOS_PREFIX/bin/pigeos-loader
fi
LOGIN_PROF
  # disable license msg at login
  touch $HOME/.hushlogin
}

config_usbmount()
{
  # add the pi user to the disk group
  sudo usermod -aG disk $DOSBOX_USER  
  # set mount option to allow write acces
  sudo sed -i 's/^FS_MOUNTOPTIONS=.*/FS_MOUNTOPTIONS="-fstype=vfat,gid=disk,dmask=0007,fmask=0117"/' \
	  /etc/usbmount/usbmount.conf
  # usbmount failed without this setting
  sudo mkdir -p /etc/systemd/system/systemd-udevd.service.d
  sudo tee /etc/systemd/system/systemd-udevd.service.d/override.conf >/dev/null <<PRIV_MNT
[Service]
PrivateMounts=no
PRIV_MNT
  # add configuration option to the user config, if not present
  grep -q MOUNT_USB $HOME/.pigeos || echo "MOUNT_USB=1" >>$HOME/.pigeos
}

config_midi()
{
  # route midi output to timidity
  sed -i 's/midiconfig\s*=.*/midiconfig=128:0/' $($DOSBOX_BIN -printconf)
}

config_ssh()
{
  sudo /usr/bin/raspi-config nonint do_ssh 0
  # SSH private key is req. for RSYNC/UNISON
  if [ ! -f $HOME/.ssh/id_rsa ]; then
    ssh-keygen -t rsa -f ~/.ssh/id_rsa -q -P ''
  fi
}

config_locale()
{
  LANG=${1:-de_DE.UTF-8}
  sudo /usr/bin/raspi-config nonint do_change_locale $LANG
  local keyb_lang=$(echo $LANG \
    | tr '[:upper:]' '[:lower:]' \
	| sed 's/.._\(..\).*/\1/')
  sudo /usr/bin/raspi-config nonint do_configure_keyboard ${keyb_lang}
  # link DOSBox mapper file for the given language
  ln -sf $PIGEOS_PREFIX/share/pigeos/mapper-0.74.map.$LANG \
         $HOME/.dosbox/mapper-0.74.map
}

config_boot()
{
  # don't wait for the network
  sudo /usr/bin/raspi-config nonint do_boot_wait 1
  # set the default framebuff resolution to 1024x768 as this gives
  # a 4:3 image ration as it was commen in the old days...
  # furthermore most modern displays can handle this using HW scaling
  for option in 'disable_overscan=1' 'dtparam=i2c_arm=on' \
                'framebuffer_width=1024' 'framebuffer_height=768'\
                'dtparam=audio=on' 'disable_splash=1' 'boot_delay=0'\
				'gpu_mem=64' 'enable_uart=1' 'hdmi_enable_4kp60=1'
  do
    grep -q "${option%=*}" $BOOT_CONFIG
	if [ $? -eq 0 ]; then
	  # option present -> alter the key=value pair
	  sudo sed -i "s/.*${option%=*}.*/${option}/" $BOOT_CONFIG
	else
	  echo append this missing option
	  sudo tee -a $BOOT_CONFIG <<<"${option}"
	fi
  done
  # hide kernel boot messages
  # route all audio to one sink (req. for Pi4)
  for option in  'quiet' 'logo.nologo'\
                 'snd_bcm2835.enable_hdmi=1'\
		 'snd_bcm2835.enable_headphones=1'\
                 'snd_bcm2835.enable_compat_alsa=1'
  do
    grep -q "${option%=*}" $BOOT_CMDLINE 
	if [ $? -ne 0 ]; then
	 sudo sed -i "s/$/ $option/" $BOOT_CMDLINE
	  # TODO: update an existing key=value pair
	fi
  done
}

config_jed() {
  # make the jed editor look & feel like on DOS
  cat >$HOME/.jedrc <<JEDRC
() = evalfile ("cua");
set_color_scheme ("blue3");
TAB_DEFAULT = 4;
JEDRC
}

config_imgprep() {
  # prepare the config for the imaging process
  sudo sed -i "s/$/ init=/usr/lib/raspi-config/init_resize\.sh/" $BOOT_CMDLINE
  sudo sed -i "s/$/ sdhci\.debug_quirks2=4/" $BOOT_CMDLINE
}
### Main ###
>$LOG_FILE
if [ $# -ne 0 ]; then
  # exec the given module
  $@
else
  # execute all modules in the default order
  install_dep_pkg $PKG_LIST 	|| exit 1
  install_dosbox_pkg      || exit 2
  install_pigeos_scripts  || exit 3
  install_pigeos_config   || exit 4
  install_splash_screen   || exit 5
  install_dosbox_modem    || exit 6
  install_dosbox_telnetd  || exit 14
  config_login            || exit 7
  # TODO use pigeos-config advanced menu
  config_usbmount     	  || exit 8
  # TODO use pigeos-config basic menu
  config_locale	          || exit 9 
  # TODO use pigeos-config advanced menu
  config_midi		      || exit 10
  config_jed              || exit 11
  config_boot		      || exit 12
fi
echo "Finished! Press Enter to reboot or Ctrl+C to return to the shell."; read
sudo reboot
