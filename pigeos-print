#!/bin/bash
# This helper script handles printer selection and
# special features to extract the original docuemnt name
# from PS printer driver output to generate a unique
# file name in the case the user wants to print to PDF file
CONFIG=$HOME/.pigeos
PDFDIR=$HOME/Shared/PDF
LOGFILE=/tmp/pigeos-print.log

get_doc_type() { file -b --mime-type $1; }
get_doc_name() {
  # extract title and map GEOS german umlauts to UTF-8
  buffer=$(cat $1 \
  	| sed -e 's/\r//' \
  	| grep -a '%%Title:.*' \
  	| sed  's/\x80/\xc3\x84/g; 
	  	  	s/\x8a/\xc3\xa4/g;
	  	  	s/\x85/\xc3\x96/g;
	  	  	s/\x9a/\xc3\xb6/g;
	  	  	s/\x86/\xc3\x9c/g;
	  	  	s/\x9f/\xc3\xbc/g;
	  	  	s/\xa7/\xc3\x9f/g' \
  )
  if [ ! -z "$buffer" ]; then
    echo $(expr "$buffer" : '%%Title: \(.*\)')
  else
    echo "unkown"
  fi
}
get_doc_psize() {
  # search for the SetPageSize line in the PgaeSetup section
  buffer=$(awk '/%%BeginPageSetup/	{f=1;next} \
                /%%.*/				{f=0;next} \
	            /.*SPS/ && f		{printf("%dx%d\n", $1*10, $2*10);exit}' $1 \
  )
  if [ ! -z "$buffer" ]; then
    echo $buffer
  else
    echo "5950x8420"
  fi
}
### MAIN #######################################################################
if [ ! -r "${1-x}" ]; then
  echo "File $1 is not readable" &>>LOGFILE
  exit 1
fi
. $CONFIG
# AUTO -> select 1st form all available printers
if [ "x$CUPS_DBPRN" == "xAUTO" ]; then
  printer=$(lpstat -a | cut -d ' ' -f 1)
else
  # validate the desired printer is available
  printer=`(lpstat -a | cut -d ' ' -f 1; echo PDF) | grep $CUPS_DBPRN`
fi
echo "Using printer '$printer' to print '$1'" >>$LOGFILE
if [ "x$printer" == "x" ]; then
  	  	  	  	  	    	  	  	  	  	  	  	  	     exit 2
elif [ "x$printer" == "xPDF" ]; then
  # try to create PDF out dir if not present
  [[ -d $PDFDIR ]] || mkdir -p $PDFDIR    	  	  	  	  || exit 3
  # validate printout is in Postscript format
  [[ "$(get_doc_type $1)" == "application/postscript" ]]  || exit 4
  # convert to PDF
  gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite \
     -dCompatibilityLevel=1.1 -g"$(get_doc_psize $1)" \
	 -sOutputFile="${PDFDIR}/$(get_doc_name $1).pdf" "$1" &>>$LOGFILE
  rm $1
else
  lpr -T "$(get_doc_name $1)" -P $printer $1 &>>$LOGFILE
fi
